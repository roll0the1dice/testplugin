package com.example.testplugin.plugin;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.MyBatisGenerator;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.Interface;
import org.mybatis.generator.api.dom.java.TopLevelClass;
import org.mybatis.generator.config.Configuration;
import org.mybatis.generator.config.xml.ConfigurationParser;
import org.mybatis.generator.internal.DefaultShellCallback;
import org.springframework.util.ResourceUtils;

import java.io.File;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

public class CustomizedPlugin extends PluginAdapter {

    public CustomizedPlugin() {
        super();
    }

    public boolean validate(List<String> warnings) {
        return true;
    }

    @Override
    public void setProperties(Properties properties) {
        super.setProperties(properties);
    }

    @Override
    public boolean modelExampleClassGenerated(TopLevelClass topLevelClass,
            IntrospectedTable introspectedTable) {

        topLevelClass.addJavaDocLine("/** This is a custom model generated by MyBatis Generator */");
        
        return true;
    }


    @Override
    public boolean modelBaseRecordClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        makeAnnotation(topLevelClass);
        for (IntrospectedColumn primaryKey : introspectedTable.getPrimaryKeyColumns()) {
            String javaProperty = primaryKey.getJavaProperty();
            for (Field field : topLevelClass.getFields()) {
                if (field.getName().equals(javaProperty)) {
                    field.addAnnotation("@Id");
                    topLevelClass.addImportedType("jakarta.persistence.Id");
                }
            }
        }
        return true;
    }

    @Override
    public boolean modelPrimaryKeyClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        makeAnnotation(topLevelClass);
        return true;
    }

    @Override
    public boolean modelRecordWithBLOBsClassGenerated(TopLevelClass topLevelClass,
            IntrospectedTable introspectedTable) {
        makeAnnotation(topLevelClass);
        return true;
    }
    
    @Override
    public boolean clientGenerated(Interface interfaze, IntrospectedTable introspectedTable) {
        interfaze.addImportedType(new FullyQualifiedJavaType("org.apache.ibatis.annotations.Mapper"));
        interfaze.addAnnotation("@Mapper");
        
        return true;
    }

    protected void makeAnnotation(TopLevelClass topLevelClass) {
        topLevelClass.addImportedType(new FullyQualifiedJavaType("lombok.Data"));
        topLevelClass.addImportedType(new FullyQualifiedJavaType("jakarta.persistence.Entity"));
        topLevelClass.addAnnotation("@Data");
        topLevelClass.addAnnotation("@Entity");

        // remove getter and setter.
        topLevelClass.getMethods().clear();
    }

    // @Override
    // public List<GeneratedJavaFile> contextGenerateAdditionalJavaFiles(IntrospectedTable introspectedTable) {
    //     // List to store additional generated files
    //     List<GeneratedJavaFile> additionalFiles = new ArrayList<>();

    //     // Create a top-level class
    //     TopLevelClass topLevelClass = new TopLevelClass("com.example.my_customized_plugin.generated.MyGeneratedClass");
    //     topLevelClass.setVisibility(JavaVisibility.PUBLIC);

    //     // Add class documentation
    //     topLevelClass.addJavaDocLine("/**");
    //     topLevelClass.addJavaDocLine(" * This is a generated class for demonstration purposes.");
    //     topLevelClass.addJavaDocLine(" */");

    //     // 获取生成的 Model 类的完全限定类名
    //     String modelClassName = introspectedTable.getBaseRecordType();
    //     try {
    //         Class<?> modelClass = Class.forName(modelClassName);
    //         java.lang.reflect.Field[] fields = modelClass.getDeclaredFields();
    //         for (java.lang.reflect.Field field : fields) {
    //             System.out.println("Field: " + field.getName() + " Type: " + field.getType());
    //             //String fieldType = field.getType().getTypeName();
    //             // Add a private field
    //             if (field.getType() != null && field.getType().getPackageName() != null) {
    //                 if (!field.getType().getPackageName().startsWith("java.lang")) {
    //                     topLevelClass.addImportedType(field.getType().getTypeName());
    //                 }
    //             }
    //             var _field = new Field(field.getName().toString(), new FullyQualifiedJavaType(field.getType().getTypeName()));
    //             //var _field = new Field("exampleField", new FullyQualifiedJavaType("java.lang.String"));

    //             _field.setVisibility(JavaVisibility.PRIVATE);
    //             _field.addJavaDocLine("/** This is an example field. */");
    //             topLevelClass.addField(_field);
    //         }
    //     } catch (ClassNotFoundException e) {
    //         e.printStackTrace();
    //     }

    //     // Use DefaultJavaFormatter to format the generated Java file
    //     DefaultJavaFormatter javaFormatter = new DefaultJavaFormatter();
    //     GeneratedJavaFile generatedJavaFile = new GeneratedJavaFile(topLevelClass, context.getJavaClientGeneratorConfiguration().getTargetProject(), javaFormatter);

    //     // Add the generated file to the list
    //     additionalFiles.add(generatedJavaFile);

    //     return additionalFiles;
    // }    

    public static void main(String[] args) {
		 try {
            // 指定 generatorConfig.xml 配置文件的路径
            String classpath = ResourceUtils.getFile("classpath:").getAbsolutePath();
            String configFilePath = Paths.get(classpath, "generatorConfig.xml").toString();

            // 准备 MyBatis Generator 的配置
            List<String> warnings = new ArrayList<>();
            boolean overwrite = true;
            File configFile = new File(configFilePath);

            // System.out.println(configFilePath);

            ConfigurationParser cp = new ConfigurationParser(warnings);
            Configuration config = cp.parseConfiguration(configFile);
            DefaultShellCallback callback = new DefaultShellCallback(overwrite);

            // 执行 MyBatis Generator
            MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);
            myBatisGenerator.generate(null);

            // 输出警告信息
            for (String warning : warnings) {
                System.out.println(warning);
            }

            System.out.println("MyBatis Generator sucesses !");

            System.exit(0);  // 正常退出

        } catch (Exception e) {
            System.out.println("MyBatis Generator fails !");
            e.printStackTrace();
        }
    
	}

}
